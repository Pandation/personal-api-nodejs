{"version":3,"sources":["pages/nailedIt/EmailTemplate.js","components/Typography/PageTitle.js","configs/modelSchemas.js","redux/actions.js","components/Forms/Form.js","pages/generics/ItemPage.js"],"names":["EmailTemplatePage","dispatch","useDispatch","dataLists","useSelector","state","config","useEffect","Config","getSelectsLists","loaded","fetching","title","type","options","selectKeys","process","itemFormValues","updateValues","className","name","value","values","onChange","subject","header","content","footer","placeholder","key","processesList","map","processItem","_id","status","PageTitle","children","experiencesSchema","bothLanguage","society","place","date","learningsSchema","educationsSchema","school","skillsSchema","text","projectsSchema","stacks","file","undefined","url","schema","en","fr","companiesSchema","address","email","contactGender","contactLastname","contactFirstname","processesSchema","sendingConfigsSchema","company","customText","lastMailDate","nextMailDate","enabled","emailTemplatesSchema","learnings","experiences","educations","skills","companies","processes","emailTemplates","sendingConfigs","Form","props","iconLeft","EditIcon","onClick","save","isEditForm","ItemPage","id","useParams","history","useHistory","useState","JSON","parse","stringify","schemas","setItemFormValues","item","language","evt","persist","s","target","Actions","getOne","tempValues","data","goBack","update","params","error","message","checked"],"mappings":"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","file":"static/js/18.9669aae9.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Input, Label, Textarea, Select } from \"@windmill/react-ui\";\r\n\r\nimport ItemPage from \"../generics/ItemPage\";\r\n\r\nimport { Config } from \"../../redux/features/config\";\r\n\r\nfunction EmailTemplatePage() {\r\n  const dispatch = useDispatch();\r\n  const dataLists = useSelector((state) => state.config.dataLists);\r\n\r\n  useEffect(() => {\r\n    dispatch(Config.getSelectsLists());\r\n  }, []);\r\n\r\n  if (!dataLists.loaded || dataLists.fetching) {\r\n    return <p>Chargement...</p>;\r\n  }\r\n\r\n  return (\r\n    <ItemPage\r\n      title=\"Email Template\"\r\n      type=\"emailTemplates\"\r\n      options={{\r\n        selectKeys: {\r\n          process: \"_id\",\r\n        },\r\n      }}\r\n    >\r\n      {(itemFormValues, updateValues) => {\r\n        return (\r\n          <div>\r\n            <div className=\"px-4 py-3 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\r\n              <Label>\r\n                <span>Name</span>\r\n                <Input\r\n                  name=\"name\"\r\n                  className=\"mt-1\"\r\n                  value={itemFormValues.values.name}\r\n                  onChange={updateValues}\r\n                />\r\n              </Label>\r\n              <Label>\r\n                <span>Subject</span>\r\n                <Input\r\n                  name=\"subject\"\r\n                  value={itemFormValues.values.subject}\r\n                  className=\"mt-1\"\r\n                  onChange={updateValues}\r\n                />\r\n              </Label>\r\n              <Label>\r\n                <span>Header</span>\r\n                <Textarea\r\n                  name=\"header\"\r\n                  value={itemFormValues.values.header}\r\n                  className=\"mt-1\"\r\n                  onChange={updateValues}\r\n                />\r\n              </Label>\r\n\r\n              <Label>\r\n                <span>Content</span>\r\n                <Textarea\r\n                  name=\"content\"\r\n                  value={itemFormValues.values.content}\r\n                  className=\"mt-1\"\r\n                  onChange={updateValues}\r\n                />\r\n              </Label>\r\n              <Label>\r\n                <span>Footer</span>\r\n                <Textarea\r\n                  name=\"footer\"\r\n                  className=\"mt-1\"\r\n                  value={itemFormValues.values.footer}\r\n                  onChange={updateValues}\r\n                />\r\n              </Label>\r\n              <Label>\r\n                <span>Process</span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  value={itemFormValues.values.process}\r\n                  name=\"process\"\r\n                  onChange={updateValues}\r\n                  placeholder=\"select a value\"\r\n                >\r\n                  <option key={\"process_default\"} value=\"\"></option>\r\n                  {dataLists.processesList?.map((processItem) => (\r\n                    <option\r\n                      key={\"process_\" + processItem.name}\r\n                      value={processItem._id}\r\n                    >\r\n                      {processItem.name}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n              </Label>\r\n              <Label>\r\n                <span>Status</span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  value={itemFormValues.values.status}\r\n                  name=\"status\"\r\n                  onChange={updateValues}\r\n                >\r\n                  <option value=\"first\">PREMIER ENVOI</option>\r\n                  <option value=\"relance\">RELANCE</option>\r\n                </Select>\r\n              </Label>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </ItemPage>\r\n  );\r\n}\r\n\r\nexport default EmailTemplatePage;\r\n","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","//PORTFOLIO\r\n\r\nexport const experiencesSchema = bothLanguage({\r\n  title: \"\",\r\n  society: \"\",\r\n  place: \"\",\r\n  date: \"\",\r\n});\r\nexport const learningsSchema = {\r\n  name: \"\",\r\n};\r\nexport const educationsSchema = bothLanguage({\r\n  title: \"\",\r\n  school: \"\",\r\n  place: \"\",\r\n  date: \"\",\r\n});\r\nexport const skillsSchema = bothLanguage({\r\n  name: \"\",\r\n  text: \"\",\r\n});\r\nexport const projectsSchema = {\r\n  ...bothLanguage({\r\n    name: \"\",\r\n    stacks: [],\r\n    date: \"\",\r\n  }),\r\n  file: undefined,\r\n  url: \"\",\r\n};\r\n\r\nfunction bothLanguage(schema) {\r\n  return { en: { ...schema }, fr: { ...schema } };\r\n}\r\n\r\n//NAILED IT\r\nexport const companiesSchema = {\r\n  name: \"\",\r\n  address: \"\",\r\n  email: \"\",\r\n  contactGender: \"0\",\r\n  contactLastname: \"\",\r\n  contactFirstname: \"\",\r\n};\r\nexport const processesSchema = {\r\n  name: \"\",\r\n};\r\nexport const sendingConfigsSchema = {\r\n  company: \"\",\r\n  process: \"\",\r\n  status: \"\",\r\n  customText: \"\",\r\n  lastMailDate: \"\",\r\n  nextMailDate: \"\",\r\n  enabled: true,\r\n};\r\nexport const emailTemplatesSchema = {\r\n  name: \"\",\r\n  subject: \"\",\r\n  header: \"\",\r\n  content: \"\",\r\n  footer: \"\",\r\n  status: \"first\",\r\n  process: \"\",\r\n};\r\n","import { Config as config } from \"./features/config\";\r\nimport { Learnings as learnings } from \"./features/portfolio/learnings\";\r\nimport { Experiences as experiences } from \"./features/portfolio/experiences\";\r\nimport { Educations as educations } from \"./features/portfolio/educations\";\r\nimport { Skills as skills } from \"./features/portfolio/skills\";\r\nimport { Companies as companies } from \"./features/nailedIt/companies\";\r\nimport { Processes as processes } from \"./features/nailedIt/processes\";\r\nimport { EmailTemplates as emailTemplates } from \"./features/nailedIt/emailTemplates\";\r\nimport { SendingConfigs as sendingConfigs } from \"./features/nailedIt/sendingConfigs\";\r\n\r\nexport default {\r\n  config,\r\n  learnings,\r\n  experiences,\r\n  educations,\r\n  skills,\r\n  companies,\r\n  processes,\r\n  emailTemplates,\r\n  sendingConfigs,\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"@windmill/react-ui\";\r\nimport { EditIcon } from \"../../icons\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div>\r\n      {props.children}\r\n      <Button\r\n        className=\"mb-5 self-end\"\r\n        iconLeft={EditIcon}\r\n        onClick={props.save}\r\n      >\r\n        {props.isEditForm ? \"Enregistrer les modifications\" : \"Ajouter\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport PageTitle from \"../../components/Typography/PageTitle\";\r\nimport { Button, Alert } from \"@windmill/react-ui\";\r\n\r\nimport Actions from \"../../redux/actions\";\r\n\r\nimport * as schemas from \"../../configs/modelSchemas\";\r\nimport Form from \"../../components/Forms/Form\";\r\n\r\nfunction ItemPage(props) {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [itemFormValues, setItemFormValues] = useState({\r\n    loaded: false,\r\n    values: JSON.parse(JSON.stringify(schemas[props.type + \"Schema\"])),\r\n  });\r\n  const item = useSelector((state) => state[props.type].item);\r\n\r\n  const updateValuesWithLanguages = (language) => (evt) => {\r\n    evt.persist();\r\n    setItemFormValues((s) => ({\r\n      ...s,\r\n      values: {\r\n        ...s.values,\r\n        [language]: {\r\n          ...s.values[language],\r\n          [evt.target.name]: evt.target.value,\r\n        },\r\n      },\r\n    }));\r\n  };\r\n\r\n  const updateValuesOneLanguage = (evt) => {\r\n    evt.persist();\r\n    setItemFormValues((s) => ({\r\n      ...s,\r\n      values: {\r\n        ...s.values,\r\n        [evt.target.name]: evt.target.value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const updateValues = props.language\r\n    ? updateValuesWithLanguages\r\n    : updateValuesOneLanguage;\r\n\r\n  const handleCheckboxChange = (evt) => {\r\n    setItemFormValues((s) => ({\r\n      ...s,\r\n      values: {\r\n        ...s.values,\r\n        [evt.target.name]: evt.target.checked,\r\n      },\r\n    }));\r\n  };\r\n\r\n  //TODO: DELETE BUTTON\r\n  const deleteItem = (id) => {\r\n    return () => {\r\n      dispatch(Actions[props.type].deleteItem(id));\r\n    };\r\n  };\r\n\r\n  const save = () => {\r\n    dispatch(Actions[props.type].update({ id, params: itemFormValues.values }));\r\n  };\r\n\r\n  //GET DATA\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(Actions[props.type].getOne(id));\r\n    }\r\n  }, [id]);\r\n\r\n  //POPULATE FORM VALUES\r\n  useEffect(() => {\r\n    if (item.loaded && !item.fetching) {\r\n      let tempValues = JSON.parse(JSON.stringify(itemFormValues.values));\r\n      if (props.language) {\r\n        for (let language in tempValues) {\r\n          for (let key in tempValues[language]) {\r\n            if (typeof item.data[language][key] !== \"undefined\") {\r\n              if (props.options?.selectKeys && props.options.selectKeys[key]) {\r\n                tempValues[language][key] =\r\n                  item.data[language][key][props.options.selectKeys[key]];\r\n              } else {\r\n                tempValues[language][key] = item.data[language][key];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let key in tempValues) {\r\n          if (typeof item.data[key] !== \"undefined\") {\r\n            if (props.options?.selectKeys && props.options.selectKeys[key]) {\r\n              tempValues[key] = item.data[key][props.options.selectKeys[key]];\r\n            } else {\r\n              tempValues[key] = item.data[key];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setItemFormValues({\r\n        values: tempValues,\r\n        loaded: true,\r\n      });\r\n    }\r\n  }, [item.loaded, item.fetching]);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>{props.title}</PageTitle>\r\n      <div>\r\n        <Button className=\"mb-3\" onClick={() => history.goBack()}>\r\n          Revenir\r\n        </Button>\r\n      </div>\r\n      {itemFormValues.loaded && !item.fetching && (\r\n        //TODO: REFACTOR ALL FORMS IN A FILE\r\n        //   typeof Forms[props.type] !== \"undefined\" &&\r\n        <Form save={save} isEditForm>\r\n          {item.error.status === true && (\r\n            <Alert type=\"warning\">{item.error.message}</Alert>\r\n          )}\r\n          {props.children(itemFormValues, updateValues, handleCheckboxChange)}\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ItemPage;\r\n"],"sourceRoot":""}