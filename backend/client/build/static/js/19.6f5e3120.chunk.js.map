{"version":3,"sources":["pages/nailedIt/SendingConfig.js","components/Typography/PageTitle.js","configs/modelSchemas.js","redux/actions.js","components/Forms/Form.js","pages/generics/ItemPage.js"],"names":["SendingConfigPage","dispatch","useDispatch","dataLists","useSelector","state","config","useEffect","Config","getSelectsLists","loaded","fetching","title","type","options","selectKeys","company","process","itemFormValues","updateValues","handleCheckboxChange","className","name","value","values","onChange","companiesList","map","companyItem","key","_id","processesList","processItem","status","rows","customText","check","checked","enabled","PageTitle","children","experiencesSchema","bothLanguage","society","place","date","learningsSchema","educationsSchema","school","skillsSchema","text","projectsSchema","stacks","file","undefined","url","schema","en","fr","companiesSchema","address","email","contactGender","contactLastname","contactFirstname","processesSchema","sendingConfigsSchema","lastMailDate","nextMailDate","emailTemplatesSchema","subject","header","content","footer","learnings","experiences","educations","skills","companies","processes","emailTemplates","sendingConfigs","Form","props","iconLeft","EditIcon","onClick","save","isEditForm","ItemPage","id","useParams","history","useHistory","useState","JSON","parse","stringify","schemas","setItemFormValues","item","language","evt","persist","s","target","Actions","getOne","tempValues","data","goBack","update","params","error","message"],"mappings":"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","file":"static/js/19.6f5e3120.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Input, Label, Textarea, Select } from \"@windmill/react-ui\";\r\n\r\nimport ItemPage from \"../generics/ItemPage\";\r\n\r\nimport { Config } from \"../../redux/features/config\";\r\n\r\nfunction SendingConfigPage() {\r\n  const dispatch = useDispatch();\r\n  const dataLists = useSelector((state) => state.config.dataLists);\r\n\r\n  useEffect(() => {\r\n    dispatch(Config.getSelectsLists());\r\n  }, []);\r\n\r\n  if (!dataLists.loaded || dataLists.fetching) {\r\n    return <p>Chargement...</p>;\r\n  }\r\n\r\n  return (\r\n    <ItemPage\r\n      title=\"Sending Configuration\"\r\n      type=\"sendingConfigs\"\r\n      options={{ selectKeys: {\r\n        company: '_id',\r\n        process: '_id',\r\n      } }}\r\n    >\r\n      {(itemFormValues, updateValues, handleCheckboxChange) => {\r\n        return (\r\n          <div>\r\n            <div className=\"px-4 py-3 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\r\n              <Label>\r\n                <span>Company</span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  name=\"company\"\r\n                  value={itemFormValues.values.company}\r\n                  onChange={updateValues}\r\n                >\r\n                  {dataLists.companiesList?.map((companyItem) => (\r\n                    <option\r\n                      key={\"company_\" + companyItem.name}\r\n                      value={companyItem._id}\r\n                    >\r\n                      {companyItem.name}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n              </Label>\r\n              <Label>\r\n                <span>Process</span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  value={itemFormValues.values.process}\r\n                  name=\"process\"\r\n                  onChange={updateValues}\r\n                >\r\n                  {dataLists.processesList?.map((processItem) => (\r\n                    <option\r\n                      key={\"process_\" + processItem.name}\r\n                      value={processItem._id}\r\n                    >\r\n                      {processItem.name}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n              </Label>\r\n              <Label>\r\n                <span>Status</span>\r\n                <Select\r\n                  className=\"mt-1\"\r\n                  name=\"status\"\r\n                  value={itemFormValues.values.status}\r\n                  onChange={updateValues}\r\n                >\r\n                  <option name=\"status\" value=\"first\">\r\n                    PREMIER ENVOI\r\n                  </option>\r\n                  <option name=\"status\" value=\"relance\">\r\n                    RELANCE\r\n                  </option>\r\n                </Select>\r\n              </Label>\r\n              <Label>\r\n                <span>Custom Text</span>\r\n                <Textarea\r\n                  className=\"mt-1\"\r\n                  rows=\"3\"\r\n                  name=\"customText\"\r\n                  onChange={updateValues}\r\n                  value={itemFormValues.values.customText}\r\n                />\r\n              </Label>\r\n              <Label className=\"mt-3\" check>\r\n                <Input\r\n                  type=\"checkbox\"\r\n                  name=\"enabled\"\r\n                  checked={itemFormValues.values.enabled}\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n                <span className=\"ml-2\">\r\n                  {itemFormValues.values.enabled ? \"Activé\" : \"Désactivé\"}\r\n                </span>\r\n              </Label>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </ItemPage>\r\n  );\r\n}\r\n\r\nexport default SendingConfigPage;\r\n","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","//PORTFOLIO\r\n\r\nexport const experiencesSchema = bothLanguage({\r\n  title: \"\",\r\n  society: \"\",\r\n  place: \"\",\r\n  date: \"\",\r\n});\r\nexport const learningsSchema = {\r\n  name: \"\",\r\n};\r\nexport const educationsSchema = bothLanguage({\r\n  title: \"\",\r\n  school: \"\",\r\n  place: \"\",\r\n  date: \"\",\r\n});\r\nexport const skillsSchema = bothLanguage({\r\n  name: \"\",\r\n  text: \"\",\r\n});\r\nexport const projectsSchema = {\r\n  ...bothLanguage({\r\n    name: \"\",\r\n    stacks: [],\r\n    date: \"\",\r\n  }),\r\n  file: undefined,\r\n  url: \"\",\r\n};\r\n\r\nfunction bothLanguage(schema) {\r\n  return { en: { ...schema }, fr: { ...schema } };\r\n}\r\n\r\n//NAILED IT\r\nexport const companiesSchema = {\r\n  name: \"\",\r\n  address: \"\",\r\n  email: \"\",\r\n  contactGender: \"0\",\r\n  contactLastname: \"\",\r\n  contactFirstname: \"\",\r\n};\r\nexport const processesSchema = {\r\n  name: \"\",\r\n};\r\nexport const sendingConfigsSchema = {\r\n  company: \"\",\r\n  process: \"\",\r\n  status: \"\",\r\n  customText: \"\",\r\n  lastMailDate: \"\",\r\n  nextMailDate: \"\",\r\n  enabled: true,\r\n};\r\nexport const emailTemplatesSchema = {\r\n  name: \"\",\r\n  subject: \"\",\r\n  header: \"\",\r\n  content: \"\",\r\n  footer: \"\",\r\n  status: \"first\",\r\n  process: \"\",\r\n};\r\n","import { Config as config } from \"./features/config\";\r\nimport { Learnings as learnings } from \"./features/portfolio/learnings\";\r\nimport { Experiences as experiences } from \"./features/portfolio/experiences\";\r\nimport { Educations as educations } from \"./features/portfolio/educations\";\r\nimport { Skills as skills } from \"./features/portfolio/skills\";\r\nimport { Companies as companies } from \"./features/nailedIt/companies\";\r\nimport { Processes as processes } from \"./features/nailedIt/processes\";\r\nimport { EmailTemplates as emailTemplates } from \"./features/nailedIt/emailTemplates\";\r\nimport { SendingConfigs as sendingConfigs } from \"./features/nailedIt/sendingConfigs\";\r\n\r\nexport default {\r\n  config,\r\n  learnings,\r\n  experiences,\r\n  educations,\r\n  skills,\r\n  companies,\r\n  processes,\r\n  emailTemplates,\r\n  sendingConfigs,\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"@windmill/react-ui\";\r\nimport { EditIcon } from \"../../icons\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div>\r\n      {props.children}\r\n      <Button\r\n        className=\"mb-5 self-end\"\r\n        iconLeft={EditIcon}\r\n        onClick={props.save}\r\n      >\r\n        {props.isEditForm ? \"Enregistrer les modifications\" : \"Ajouter\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport PageTitle from \"../../components/Typography/PageTitle\";\r\nimport { Button, Alert } from \"@windmill/react-ui\";\r\n\r\nimport Actions from \"../../redux/actions\";\r\n\r\nimport * as schemas from \"../../configs/modelSchemas\";\r\nimport Form from \"../../components/Forms/Form\";\r\n\r\nfunction ItemPage(props) {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [itemFormValues, setItemFormValues] = useState({\r\n    loaded: false,\r\n    values: JSON.parse(JSON.stringify(schemas[props.type + \"Schema\"])),\r\n  });\r\n  const item = useSelector((state) => state[props.type].item);\r\n\r\n  const updateValuesWithLanguages = (language) => (evt) => {\r\n    evt.persist();\r\n    setItemFormValues((s) => ({\r\n      ...s,\r\n      values: {\r\n        ...s.values,\r\n        [language]: {\r\n          ...s.values[language],\r\n          [evt.target.name]: evt.target.value,\r\n        },\r\n      },\r\n    }));\r\n  };\r\n\r\n  const updateValuesOneLanguage = (evt) => {\r\n    evt.persist();\r\n    setItemFormValues((s) => ({\r\n      ...s,\r\n      values: {\r\n        ...s.values,\r\n        [evt.target.name]: evt.target.value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const updateValues = props.language\r\n    ? updateValuesWithLanguages\r\n    : updateValuesOneLanguage;\r\n\r\n  const handleCheckboxChange = (evt) => {\r\n    setItemFormValues((s) => ({\r\n      ...s,\r\n      values: {\r\n        ...s.values,\r\n        [evt.target.name]: evt.target.checked,\r\n      },\r\n    }));\r\n  };\r\n\r\n  //TODO: DELETE BUTTON\r\n  const deleteItem = (id) => {\r\n    return () => {\r\n      dispatch(Actions[props.type].deleteItem(id));\r\n    };\r\n  };\r\n\r\n  const save = () => {\r\n    dispatch(Actions[props.type].update({ id, params: itemFormValues.values }));\r\n  };\r\n\r\n  //GET DATA\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(Actions[props.type].getOne(id));\r\n    }\r\n  }, [id]);\r\n\r\n  //POPULATE FORM VALUES\r\n  useEffect(() => {\r\n    if (item.loaded && !item.fetching) {\r\n      let tempValues = JSON.parse(JSON.stringify(itemFormValues.values));\r\n      if (props.language) {\r\n        for (let language in tempValues) {\r\n          for (let key in tempValues[language]) {\r\n            if (typeof item.data[language][key] !== \"undefined\") {\r\n              if (props.options?.selectKeys && props.options.selectKeys[key]) {\r\n                tempValues[language][key] =\r\n                  item.data[language][key][props.options.selectKeys[key]];\r\n              } else {\r\n                tempValues[language][key] = item.data[language][key];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let key in tempValues) {\r\n          if (typeof item.data[key] !== \"undefined\") {\r\n            if (props.options?.selectKeys && props.options.selectKeys[key]) {\r\n              tempValues[key] = item.data[key][props.options.selectKeys[key]];\r\n            } else {\r\n              tempValues[key] = item.data[key];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setItemFormValues({\r\n        values: tempValues,\r\n        loaded: true,\r\n      });\r\n    }\r\n  }, [item.loaded, item.fetching]);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>{props.title}</PageTitle>\r\n      <div>\r\n        <Button className=\"mb-3\" onClick={() => history.goBack()}>\r\n          Revenir\r\n        </Button>\r\n      </div>\r\n      {itemFormValues.loaded && !item.fetching && (\r\n        //TODO: REFACTOR ALL FORMS IN A FILE\r\n        //   typeof Forms[props.type] !== \"undefined\" &&\r\n        <Form save={save} isEditForm>\r\n          {item.error.status === true && (\r\n            <Alert type=\"warning\">{item.error.message}</Alert>\r\n          )}\r\n          {props.children(itemFormValues, updateValues, handleCheckboxChange)}\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ItemPage;\r\n"],"sourceRoot":""}